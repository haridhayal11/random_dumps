name: Check firmware update

on:
  schedule:
    - cron: "0 */6 * * *"
  push:

jobs:
  update:
    runs-on: ubuntu-20.04

    strategy:
      fail-fast: false
      matrix:
        include:
          - model: "SM-G991B"
            region: "DBT"
          - model: "SM-G996B"
            region: "DBT"
          - model: "SM-G998B"
            region: "DBT"            

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Compare latest version with current version
        id: check
        run: |
          need_update=0
          latest=`curl --retry 5 --retry-delay 5 http://fota-cloud-dn.ospserver.net/firmware/${{ matrix.region }}/${{ matrix.model }}/version.xml | grep latest | sed 's/^[^>]*>//' | sed 's/<.*//'`
          latest_short=`echo $latest | cut -d'/' -f1`
          current=`cat current.${{ matrix.model }}` || need_update=1
          [[ $latest != $current ]] && need_update=1
          echo ::set-output name=latest_version::$latest
          echo ::set-output name=latest_shortversion::$latest_short
          echo ::set-output name=need_update::$need_update

      - name: Print available space
        if: steps.check.outputs.need_update == 1
        run: |
          sudo df -h

      - name: Install dependencies
        if: steps.check.outputs.need_update == 1
        run: |
          sudo apt-get update
          sudo apt-get remove --purge -y "php*" "dotnet*" "mysql*" "nodejs*" "clang*" "google*"
          sudo apt-get autoremove -y
          sudo apt-get clean
          sudo rm -rf /usr/local
          sudo apt-get install -y liblz4-tool zip simg2img
          sudo wget -O /usr/bin/samfirm https://github.com/jesec/SamFirm.NET/releases/latest/download/linux-x64 && sudo chmod +x /usr/bin/samfirm
          sudo wget -O /usr/bin/lpunpack https://wbn.ro/lpunpack && sudo chmod +x /usr/bin/lpunpack

      - name: Print available space
        if: steps.check.outputs.need_update == 1
        run: |
          sudo df -h

      - name: Fetch firmware
        if: steps.check.outputs.need_update == 1
        run: samfirm -m ${{ matrix.model }} -r ${{ matrix.region }}

      - name: Print available space
        if: steps.check.outputs.need_update == 1
        run: |
          sudo df -h

      - name: Print directory structure
        if: steps.check.outputs.need_update == 1
        run: ls -la ${{ matrix.model }}_${{ matrix.region }}

      - name: Get path of files
        if: steps.check.outputs.need_update == 1
        id: files
        run: |
          echo ::set-output name=ap::`find -name AP*`

      - name: Check downloaded firmware version
        if: steps.check.outputs.need_update == 1
        run: |
          version_short=`echo ${{ steps.files.outputs.ap }} | cut -d'_' -f3`
          changelist=`echo ${{ steps.files.outputs.ap }} | cut -d'_' -f4`
          echo PDA version: $version_short > versions.txt
          echo Changelist: $changelist >> versions.txt

      - name: Print available space
        if: steps.check.outputs.need_update == 1
        run: |
          sudo df -h
          
      - name: Extract images from AP and create zip
        if: steps.check.outputs.need_update == 1
        id: releases
        run: |
          target_version=${{ steps.check.outputs.latest_shortversion }}
          basedir=$(pwd)
          releasedir=$basedir/$target_version
          mkdir -p $releasedir
          parts=(super system vendor)
          for i in ${parts[@]}; do [[ `tar tvf ${{ steps.files.outputs.ap }} | grep $i` ]] && tar xvf ${{ steps.files.outputs.ap }} $(echo `tar tvf ${{ steps.files.outputs.ap }} | grep $i | awk -F " " '{print $NF}'`); done
          sudo df -h
          rm -rf *.tar.md5 *vbmeta*
          sudo df -h
          for i in `ls | grep lz4`; do lz4 -dm $i ; rm -rf $i; done
          for i in `ls | grep img`; do simg2img $i raw_$i ; rm -rf $i; mv raw_$i $i; done
          sudo df -h
          sudo df -h
          cp boot.img $releasedir/
          cp vendor.img $releasedir/
          cp recovery.img $releasedir/
          sudo umount system && sudo umount vendor && rm -rf *img
          sudo df -h
          echo ::set-output name=folder::$releasedir

      - name: Print available space
        if: steps.check.outputs.need_update == 1
        run: |
          sudo df -h

      - name: Update current version
        if: steps.check.outputs.need_update == 1
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git pull origin ${{github.ref}} --ff-only
          echo ${{ steps.check.outputs.latest_version }} > current.${{ matrix.model }}
          git add current.${{ matrix.model }}
          git commit -m "${{ matrix.model }}: ${{ steps.check.outputs.latest_version }}"
          git tag ${{ steps.check.outputs.latest_shortversion }}

      - name: Push changes to repo
        if: steps.check.outputs.need_update == 1
        uses: ad-m/github-push-action@master
        with:
          tags: true
          github_token: ${{ secrets.TOKEN }}

      - name: Upload release assets
        if: steps.check.outputs.need_update == 1
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          body_path: versions.txt
          tag_name: ${{ steps.check.outputs.latest_shortversion }}
          files: |
            ${{ steps.releases.outputs.folder }}/recovery.img
            ${{ steps.releases.outputs.folder }}/boot.img

